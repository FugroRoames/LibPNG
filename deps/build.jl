if VERSION < v"1.3"

using BinaryProvider # requires BinaryProvider 0.3.0 or later
using CMakeWrapper: cmake_executable

include("compile.jl")

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(joinpath(@__DIR__, "usr"))
products = [
    LibraryProduct(prefix, "libpng16", :libpng)
]

# Download binaries from hosted location
source_prefix = "https://sourceforge.net/projects/libpng/files/libpng16/1.6.37"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:x86_64, libc=:glibc) => ("$source_prefix/libpng-1.6.37.tar.gz", "daeb2620d829575513e35fecc83f0d3791a620b9b93d800b763542ece9390fb4")
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    compile(basename(dl_info[1]), dl_info[1], dl_info[2], prefix=prefix, verbose=verbose)
end

# check again whether the dependency is satisfied, which
# may not be true if dlopen fails due to a libc++ incompatibility
any(!satisfied(p; verbose=verbose) for p in products) && error("Unable to install libpng!")

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)

end
